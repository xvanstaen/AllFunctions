import { ElementRef, EventEmitter, NgZone, OnDestroy, OnInit } from '@angular/core';
import { HttpClient, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { FileSaverOptions } from 'file-saver';
import { FileSaverService } from './filesaver.service';
import * as i0 from "@angular/core";
export declare class FileSaverDirective implements OnInit, OnDestroy {
    private ngZone;
    private el;
    private fss;
    private httpClient;
    method: string;
    http?: Observable<HttpResponse<Blob>>;
    query: any;
    header: any;
    url: string;
    fileName?: string;
    fsOptions?: FileSaverOptions;
    readonly success: EventEmitter<HttpResponse<Blob>>;
    readonly error: EventEmitter<any>;
    private readonly destroy$;
    constructor(ngZone: NgZone, el: ElementRef<HTMLButtonElement>, fss: FileSaverService, httpClient: HttpClient);
    ngOnInit(): void;
    ngOnDestroy(): void;
    private getName;
    setDisabled(status: boolean): void;
    private setupClickListener;
    private emitIfHasObservers;
    static ɵfac: i0.ɵɵFactoryDeclaration<FileSaverDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<FileSaverDirective, "[fileSaver]", ["fileSaver"], { "method": { "alias": "method"; "required": false; }; "http": { "alias": "http"; "required": false; }; "query": { "alias": "query"; "required": false; }; "header": { "alias": "header"; "required": false; }; "url": { "alias": "url"; "required": true; }; "fileName": { "alias": "fileName"; "required": false; }; "fsOptions": { "alias": "fsOptions"; "required": false; }; }, { "success": "success"; "error": "error"; }, never, never, true, never>;
}
