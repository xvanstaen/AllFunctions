import { Injectable } from '@angular/core';
import { saveAs } from 'file-saver';
import * as i0 from "@angular/core";
/** Check the `Blob` existance only once. */
let isFileSaverSupported;
try {
    isFileSaverSupported = !!new Blob();
}
catch {
    isFileSaverSupported = false;
}
export class FileSaverService {
    get isFileSaverSupported() {
        return isFileSaverSupported;
    }
    genType(fileName) {
        if (!fileName || fileName.lastIndexOf('.') === -1) {
            return 'text/plain';
        }
        const type = fileName.substring(fileName.lastIndexOf('.') + 1);
        switch (type) {
            case 'txt':
                return 'text/plain';
            case 'xml':
            case 'html':
                return `text/${type}`;
            case 'json':
                return 'octet/stream';
            default:
                return `application/${type}`;
        }
    }
    save(blob, fileName, filtType, option) {
        if (!blob) {
            throw new Error('Data argument should be a blob instance');
        }
        const file = new Blob([blob], { type: filtType || blob.type || this.genType(fileName) });
        saveAs(file, decodeURI(fileName || 'download'), option);
    }
    saveText(txt, fileName, option) {
        const blob = new Blob([txt]);
        this.save(blob, fileName, undefined, option);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.3", ngImport: i0, type: FileSaverService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.0.3", ngImport: i0, type: FileSaverService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.3", ngImport: i0, type: FileSaverService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXNhdmVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvc3JjL2ZpbGVzYXZlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLE1BQU0sRUFBb0IsTUFBTSxZQUFZLENBQUM7O0FBRXRELDRDQUE0QztBQUM1QyxJQUFJLG9CQUE2QixDQUFDO0FBQ2xDLElBQUksQ0FBQztJQUNILG9CQUFvQixHQUFHLENBQUMsQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDO0FBQ3RDLENBQUM7QUFBQyxNQUFNLENBQUM7SUFDUCxvQkFBb0IsR0FBRyxLQUFLLENBQUM7QUFDL0IsQ0FBQztBQUdELE1BQU0sT0FBTyxnQkFBZ0I7SUFDM0IsSUFBSSxvQkFBb0I7UUFDdEIsT0FBTyxvQkFBb0IsQ0FBQztJQUM5QixDQUFDO0lBRUQsT0FBTyxDQUFDLFFBQXdCO1FBQzlCLElBQUksQ0FBQyxRQUFRLElBQUksUUFBUSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDO1lBQ2xELE9BQU8sWUFBWSxDQUFDO1FBQ3RCLENBQUM7UUFDRCxNQUFNLElBQUksR0FBRyxRQUFRLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDL0QsUUFBUSxJQUFJLEVBQUUsQ0FBQztZQUNiLEtBQUssS0FBSztnQkFDUixPQUFPLFlBQVksQ0FBQztZQUN0QixLQUFLLEtBQUssQ0FBQztZQUNYLEtBQUssTUFBTTtnQkFDVCxPQUFPLFFBQVEsSUFBSSxFQUFFLENBQUM7WUFDeEIsS0FBSyxNQUFNO2dCQUNULE9BQU8sY0FBYyxDQUFDO1lBQ3hCO2dCQUNFLE9BQU8sZUFBZSxJQUFJLEVBQUUsQ0FBQztRQUNqQyxDQUFDO0lBQ0gsQ0FBQztJQUVELElBQUksQ0FBQyxJQUFpQixFQUFFLFFBQWlCLEVBQUUsUUFBaUIsRUFBRSxNQUF5QjtRQUNyRixJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDVixNQUFNLElBQUksS0FBSyxDQUFDLHlDQUF5QyxDQUFDLENBQUM7UUFDN0QsQ0FBQztRQUVELE1BQU0sSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsUUFBUSxJQUFJLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDekYsTUFBTSxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsUUFBUSxJQUFJLFVBQVUsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQzFELENBQUM7SUFFRCxRQUFRLENBQUMsR0FBVyxFQUFFLFFBQWlCLEVBQUUsTUFBeUI7UUFDaEUsTUFBTSxJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQzdCLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDL0MsQ0FBQzs4R0FuQ1UsZ0JBQWdCO2tIQUFoQixnQkFBZ0IsY0FESCxNQUFNOzsyRkFDbkIsZ0JBQWdCO2tCQUQ1QixVQUFVO21CQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IHNhdmVBcywgRmlsZVNhdmVyT3B0aW9ucyB9IGZyb20gJ2ZpbGUtc2F2ZXInO1xuXG4vKiogQ2hlY2sgdGhlIGBCbG9iYCBleGlzdGFuY2Ugb25seSBvbmNlLiAqL1xubGV0IGlzRmlsZVNhdmVyU3VwcG9ydGVkOiBib29sZWFuO1xudHJ5IHtcbiAgaXNGaWxlU2F2ZXJTdXBwb3J0ZWQgPSAhIW5ldyBCbG9iKCk7XG59IGNhdGNoIHtcbiAgaXNGaWxlU2F2ZXJTdXBwb3J0ZWQgPSBmYWxzZTtcbn1cblxuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcbmV4cG9ydCBjbGFzcyBGaWxlU2F2ZXJTZXJ2aWNlIHtcbiAgZ2V0IGlzRmlsZVNhdmVyU3VwcG9ydGVkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBpc0ZpbGVTYXZlclN1cHBvcnRlZDtcbiAgfVxuXG4gIGdlblR5cGUoZmlsZU5hbWU/OiBzdHJpbmcgfCBudWxsKTogc3RyaW5nIHtcbiAgICBpZiAoIWZpbGVOYW1lIHx8IGZpbGVOYW1lLmxhc3RJbmRleE9mKCcuJykgPT09IC0xKSB7XG4gICAgICByZXR1cm4gJ3RleHQvcGxhaW4nO1xuICAgIH1cbiAgICBjb25zdCB0eXBlID0gZmlsZU5hbWUuc3Vic3RyaW5nKGZpbGVOYW1lLmxhc3RJbmRleE9mKCcuJykgKyAxKTtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgJ3R4dCc6XG4gICAgICAgIHJldHVybiAndGV4dC9wbGFpbic7XG4gICAgICBjYXNlICd4bWwnOlxuICAgICAgY2FzZSAnaHRtbCc6XG4gICAgICAgIHJldHVybiBgdGV4dC8ke3R5cGV9YDtcbiAgICAgIGNhc2UgJ2pzb24nOlxuICAgICAgICByZXR1cm4gJ29jdGV0L3N0cmVhbSc7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gYGFwcGxpY2F0aW9uLyR7dHlwZX1gO1xuICAgIH1cbiAgfVxuXG4gIHNhdmUoYmxvYjogQmxvYiB8IG51bGwsIGZpbGVOYW1lPzogc3RyaW5nLCBmaWx0VHlwZT86IHN0cmluZywgb3B0aW9uPzogRmlsZVNhdmVyT3B0aW9ucyk6IHZvaWQge1xuICAgIGlmICghYmxvYikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdEYXRhIGFyZ3VtZW50IHNob3VsZCBiZSBhIGJsb2IgaW5zdGFuY2UnKTtcbiAgICB9XG5cbiAgICBjb25zdCBmaWxlID0gbmV3IEJsb2IoW2Jsb2JdLCB7IHR5cGU6IGZpbHRUeXBlIHx8IGJsb2IudHlwZSB8fCB0aGlzLmdlblR5cGUoZmlsZU5hbWUpIH0pO1xuICAgIHNhdmVBcyhmaWxlLCBkZWNvZGVVUkkoZmlsZU5hbWUgfHwgJ2Rvd25sb2FkJyksIG9wdGlvbik7XG4gIH1cblxuICBzYXZlVGV4dCh0eHQ6IHN0cmluZywgZmlsZU5hbWU/OiBzdHJpbmcsIG9wdGlvbj86IEZpbGVTYXZlck9wdGlvbnMpOiB2b2lkIHtcbiAgICBjb25zdCBibG9iID0gbmV3IEJsb2IoW3R4dF0pO1xuICAgIHRoaXMuc2F2ZShibG9iLCBmaWxlTmFtZSwgdW5kZWZpbmVkLCBvcHRpb24pO1xuICB9XG59XG4iXX0=